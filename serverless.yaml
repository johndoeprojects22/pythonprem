AWSTemplateFormatVersion: '2010-09-09'
Description: Lambda function with cfn-response.
Resources:
  FunctionStack:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.8
      Role: arn:aws:iam::986496399122:role/lambda-example-role
      Handler: lambda_function.lambda_handler
      Code:
        S3Bucket: INSERT
        S3Key: hello.zip
      Timeout: 5
      FunctionName: premlmda
      Description: Invoke a function during stack creation.
      TracingConfig:
        Mode: Active
  
  

  PremAPI:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: PyPrem
  
  PremAPIMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "NONE"
      HttpMethod: "GET"
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS_PROXY"
        Uri: !Sub 
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !GetAtt "FunctionStack.Arn"
      ResourceId: !GetAtt "PremAPI.RootResourceId"
      RestApiId: !Ref "PremAPI"
  
  PremApiDeployment:
    Type: "AWS::ApiGateway::Deployment"
    DependsOn: "PremAPIMethod"
    Properties:
      RestApiId: !Ref "PremAPI"
      StageName: PyPrem


  PremAPIInvoke:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt "FunctionStack.Arn"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${PremAPI}/*/GET/"
  
  APISecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Allow http to client host
        VpcId: vpc-4f3f5f32
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: 0.0.0.0/0
        SecurityGroupEgress:
          - IpProtocol: "-1"
            CidrIp: 0.0.0.0/0


    APIEndpoint:
      Type: AWS::EC2::VPCEndpoint
      Properties: 
        PolicyDocument: 
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action: '*'
                  Principal: '*'
                  Resource: '*'
        PrivateDnsEnabled: false
        SecurityGroupIds: 
          - !GetAtt APISecurityGroup.GroupId
        ServiceName: !Sub 'com.amazonaws.${AWS::Region}.execute-api'
        SubnetIds: 
          - subnet-0a1d4f2b
          - subnet-8011f5cc
          - subnet-2585d47a
          - subnet-cc039bfd
          - subnet-b791c5d1
          - subnet-98dfd196
        VpcEndpointType: Interface
        VpcId: vpc-4f3f5f32
    PrivateAPI:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      EndpointConfiguration:
        Types: [PRIVATE]
        VpcEndpointIds: [INSERT]
     
      Name: PrvAPI

      Policy: 
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action: 'execute-api:Invoke'
              Principal: '*'
              Resource: '*'
        
  PrivateAPIMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "NONE"
      HttpMethod: "GET"
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS_PROXY"
        Uri: !Sub 
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !GetAtt "FunctionStack.Arn"
      ResourceId: !GetAtt "PrivateAPI.RootResourceId"
      RestApiId: !Ref "PrivateAPI"

  PrivateApiDeployment:
    Type: "AWS::ApiGateway::Deployment"
    DependsOn: "PrivateAPIMethod"
    Properties:
      RestApiId: !Ref "PrivateAPI"
      StageName: Prod

  PrivateAPIInvoke:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt "FunctionStack.Arn"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${PrivateAPI}/*/GET/"
